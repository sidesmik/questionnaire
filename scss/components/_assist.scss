$screen_sizes: (
	lg: $desktop-breakpoint,
	md: $tablet-breakpoint,
	sm: $mobile-big-breakpoint,
	xs: $mobile-small-breakpoint
);

// Gutters
$gutters: (
	no: 0,
	tiny: 5px,
	small: 10px,
	normal: 15px,
	medium: 20px,
	big: 25px,
	large: 30px,
	huge: 50px
);

$sides: (
	top: 'top',
	right: 'right',
	bottom: 'bottom',
	left: 'left'
);

@each $i in $gutters{
	$gutter-key: nth($i, 1);
	$gutter-value: nth($i, 2);

	@each $j in $sides{
		$side-key: nth($j, 1);
		.margin-#{$side-key}-#{$gutter-key} {
			margin-#{$side-key}: $gutter-value !important;
		}
		.margin-#{$gutter-key} {
			margin: $gutter-value !important;
		}
		.padding-#{$side-key}-#{$gutter-key} {
			padding-#{$side-key}: $gutter-value !important;
		}
		.padding-#{$gutter-key} {
			padding: $gutter-value !important;
		}
	}
}

@each $k in $screen_sizes{
	$prefix: nth($k, 1);
	$breakpoint: nth($k, 2);

	@each $i in $gutters{
		$gutter-key: nth($i, 1);
		$gutter-value: nth($i, 2);

		@each $j in $sides{
			$side-key: nth($j, 1);

			@media screen and (max-width: $breakpoint){
				.#{$prefix}-margin-#{$side-key}-#{$gutter-key} {
					margin-#{$side-key}: $gutter-value !important;
				}
				.#{$prefix}-margin-#{$gutter-key} {
					margin: $gutter-value !important;
				}
				.#{$prefix}-padding-#{$side-key}-#{$gutter-key} {
					padding-#{$side-key}: $gutter-value !important;
				}
				.#{$prefix}-padding-#{$gutter-key} {
					padding: $gutter-value !important;
				}
			}
		}
	}
}

// Colors
$colors: (
	blue: $blue,
	lightblue: $lightblue,
	green: $green,
	lightgray: $lightgray,
	gray: $gray,
	dark: $dark,
	violet: $violet,
	azure: $azure,
	text-lightgray: $text-lightgray,
	white: #fff
);

@each $i in $colors{
	$color-key: nth($i, 1);
	$color-value: nth($i, 2);

	.color-#{$color-key} {
		color: $color-value !important;
	}
}


// Flex Aligns
$aligns: (
	center: 'center',
	baseline: 'baseline',
	end: 'flex-end',
	start: 'flex-start',
	stretch: 'stretch',
	flex-end: 'flex-end',
	flex-start: 'flex-start',
	between: 'space-between'
);

@each $i in $aligns{
	$align-key: nth($i, 1);
	$align-value: nth($i, 2);

	.align-#{$align-key} {
		align-items: #{$align-value} !important;
	}

	.justify-#{$align-key} {
		justify-content: #{$align-value} !important;
	}
}

@each $k in $screen_sizes{
	$prefix: nth($k, 1);
	$breakpoint: nth($k, 2);

	@each $i in $aligns{
		$align-key: nth($i, 1);
		$align-value: nth($i, 2);

		@media screen and (max-width: $breakpoint){
			.#{$prefix}-align-#{$align-key} {
				align-items: #{$align-value} !important;
			}

			.#{$prefix}-justify-#{$align-key} {
				justify-content: #{$align-value} !important;
			}
		}
	}
}

// Flex
.display-flex{ display: flex; }
.flex-none{ flex: none }
.flex-auto{ flex: auto; }
.flex-column{ flex-direction: column; }
.flex-center{
	display: flex;
	align-items: center;
	justify-content: center;
}

.flex-right{ margin-left: auto; }


.fullwidth{
	width: 100%;
}

.flex-wrap-no{
	flex-wrap: nowrap !important;
}

.flex-wrap-wrap{
	flex-wrap: wrap !important;
}

@each $k in $screen_sizes{
	$prefix: nth($k, 1);
	$breakpoint: nth($k, 2);

	@media screen and (max-width: $breakpoint){
		.#{$prefix}-flex-column {
			flex-direction: column !important;
		}

		.#{$prefix}-flex-wrap-no {
			flex-wrap: nowrap !important;
		}

		.#{$prefix}-flex-wrap-wrap {
			flex-wrap: wrap !important;
		}

		.#{$prefix}-fullwidth {
			width: 100% !important;
		}
	}
}

// Font Params
.font-bold{ font-weight: bold !important; }
.font-normal{ font-weight: 400 !important; }
.nowrap{ white-space: nowrap; }
.text-uppercase{ text-transform: uppercase !important; }
.text-center{ text-align: center; }

// Divider
.divider{
	width: 100%;
	height: 1px;
	margin: 30px 0;
	background: #ddd;
}

.scrollable-container{
	display: block;
	width: 100%;
	overflow-x: auto;
	-webkit-overflow-scrolling: touch;
	-ms-overflow-style: -ms-autohiding-scrollbar;

	.table{
		width: 100%;
		max-width: 100%;
		display: table;
	}
}

// Hidden/Visible
.hidden{ display: none !important; }
.visible{ display: block !important; }
.visible-flex{ display: flex !important; }

@each $k in $screen_sizes{
	$prefix: nth($k, 1);
	$breakpoint: nth($k, 2);

	@each $i in $aligns{
		$align-key: nth($i, 1);
		$align-value: nth($i, 2);

		@media screen and (min-width: $breakpoint){
			.visible-#{$prefix} { display: none !important; }
			.visible-flex-#{$prefix} { display: none !important; }
		}

		@media screen and (max-width: $breakpoint){
			.hidden-#{$prefix} { display: none !important; }
			.visible-#{$prefix} { display: block !important; }
			.visible-flex-#{$prefix} { display: flex !important; }
		}
	}
}

.push{
	position: relative;
}